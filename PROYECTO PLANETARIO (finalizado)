/*
 * PROGRAMA: PLANETARIO INTERACTIVO
 * DESCRIPCI√ìN: Sistema de gesti√≥n de informaci√≥n astron√≥mica que permite consultar
 *              planetas y administrar informaci√≥n de sat√©lites naturales
 * CARACTER√çSTICAS:
 *   - Consulta de planetas por distancia al sol
 *   - Consulta de planetas por inclinaci√≥n orbital
 *   - Registro, visualizaci√≥n y eliminaci√≥n de sat√©lites
 *   - Interfaz de men√∫ interactiva
 */

#include <iostream>
#include <cstdlib>
using namespace std;

/*
 * ESTRUCTURA: Planeta
 * PROP√ìSITO: Almacenar informaci√≥n completa de un planeta
 * CAMPOS:
 *   - nombre: Nombre del planeta
 *   - distancia_sol: Distancia media al sol en Unidades Astron√≥micas (UA)
 *   - inclinacion_orbital: Inclinaci√≥n de la √≥rbita en grados
 *   - periodo_orbital: Tiempo de traslaci√≥n en a√±os terrestres
 *   - velocidad_orbital: Velocidad orbital promedio en km/s
 */
struct Planeta {
    string nombre;
    float distancia_sol;        // UA (Unidades Astron√≥micas)
    float inclinacion_orbital;  // Grados
    float periodo_orbital;      // A√±os terrestres
    float velocidad_orbital;    // km/s
};

/*
 * ESTRUCTURA: satelites
 * PROP√ìSITO: Almacenar informaci√≥n de sat√©lites naturales de cada planeta
 * CAMPOS:
 *   - planeta_asociado: Planeta al que pertenece el sat√©lite
 *   - nombre_satelite: Nombre del sat√©lite natural
 *   - excentricidad_satelite: Medida de cu√°nto se desv√≠a la √≥rbita de ser circular
 *   - periodo_orbital_satelite: Tiempo que tarda en orbitar su planeta (d√≠as)
 *   - inclinacion_orbital_satelite: Inclinaci√≥n de la √≥rbita respecto al ecuador del planeta
 */
struct satelites {
    string planeta_asociado;
    string nombre_satelite;
    float excentricidad_satelite;
    float periodo_orbital_satelite;     // D√≠as
    float inclinacion_orbital_satelite; // Grados
};

/*
 * ARRAY GLOBAL: satelite[]
 * PROP√ìSITO: Almacenar hasta 8 sat√©lites (uno por planeta)
 * NOTA: Inicializado solo con nombres de planetas, los datos de sat√©lites
 *       se agregan din√°micamente durante la ejecuci√≥n del programa
 */
satelites satelite[] = {
    {"neptuno"},
    {"urano"},
    {"saturno"},
    {"jupiter"},
    {"marte"},
    {"tierra"},
    {"venus"},
    {"mercurio"},
};

/*
 * ARRAY GLOBAL: planetas[]
 * PROP√ìSITO: Informaci√≥n de planetas ordenados por distancia del sol (mayor a menor)
 * USO: Para consultas de planetas con distancia menor a la seleccionada
 * ORDEN: Neptuno -> Mercurio (del m√°s lejano al m√°s cercano al sol)
 */
Planeta planetas[] = {
    {"Neptuno", 30.05, 1.8, 164.79, 5.43},
    {"Urano", 19.22, 0.8, 84.01, 6.80},
    {"Saturno", 9.58, 2.5, 29.46, 9.68},
    {"Jupiter", 5.20, 1.3, 11.86, 13.07},
    {"Marte", 1.52, 1.9, 1.88, 24.07},
    {"Tierra", 1.00, 0.0, 1.00, 29.78},
    {"Venus", 0.72, 3.4, 0.62, 35.02},
    {"Mercurio", 0.39, 7.0, 0.24, 47.36}
};

/*
 * ARRAY GLOBAL: planetas2[]
 * PROP√ìSITO: Informaci√≥n de planetas ordenados por inclinaci√≥n orbital (mayor a menor)
 * USO: Para consultas de planetas con inclinaci√≥n menor a la seleccionada
 * ORDEN: Mercurio -> Tierra (de mayor a menor inclinaci√≥n orbital)
 */
Planeta planetas2[] = {
    {"Mercurio", 0.39, 7.0, 0.24, 47.36},
    {"Venus", 0.72, 3.4, 0.62, 35.02},
    {"Saturno", 9.58, 2.5, 29.46, 9.68},
    {"Marte", 1.52, 1.9, 1.88, 24.07},
    {"Neptuno", 30.05, 1.8, 164.79, 5.43},
    {"Jupiter", 5.20, 1.3, 11.86, 13.07},
    {"Urano", 19.22, 0.8, 84.01, 6.80}, 
    {"Tierra", 1.00, 0.0, 1.00, 29.78},
};

int main(int argc, char** argv)
{
  (void)system("cls");  
  
  // PANTALLA DE BIENVENIDA - Portada del programa
  cout << "\n====================================================================\n";
  cout << "                       ‚ú®‚≠ê PLANETARIO ‚≠ê‚ú® \n";
  cout << "====================================================================\n";
  cout << "\n                        AUTORES DEL PROGRAMA:\n";
  cout << "\n                   ‚Ä¢ Brahiam Nicolas Rodriguez Arroyo üóø\n";
  cout << "                     ‚Ä¢ 10422421484\n";
  cout << "                    \n";
  cout << "                     ‚Ä¢ Andres Felipe Le√≥n P√°ez üå†\n";
  cout << "                     ‚Ä¢ 10422421664\n";
  cout << "\n====================================================================\n";
  cout << "\n               Presione ENTER para continuar...";
  cin.get();  // Pausa para que el usuario lea la informaci√≥n
  int menu;  // Variable para almacenar la opci√≥n seleccionada por el usuario
do
{
  /*
   * INTERFAZ: Men√∫ principal
   * - Presenta 7 opciones de funcionalidad
   * - Captura selecci√≥n del usuario
   */
  (void)system("cls");  // Limpiar pantalla antes de mostrar men√∫
  cout << "\n====================================================================\n";
  cout << "                       ‚ú®‚≠ê PLANETARIO ‚≠ê‚ú® \n";
  cout << "====================================================================\n";
  cout<<"Bienvenido al planetario Earth, a continuaci√≥n te mostrar√© las opciones del men√∫ \n";
  cout<<"\n                      ===== MEN√ö PRINCIPAL =====\n";
  cout << "\n---------------------------------------------------------------------------------\n";
  cout<<"1. Consultar los planetas con una distancia media al sol menor que la distancia seleccionada. \n";
  cout<<"2. Consultar los planetas con una inclinaci√≥n orbital menor a la del planeta seleccionado. \n";
  cout<<"3. Registrar y Editar la informaci√≥n de un sat√©lite natural.\n";
  cout<<"4. Visualizar informaci√≥n de sat√©lites.\n";
  cout<<"5. Eliminar informaci√≥n de sat√©lites.\n";
  cout<<"6. Visualizar informaci√≥n de planetas.\n";
  cout<<"7. Salir del men√∫.";
  cout << "\n---------------------------------------------------------------------------------\n";
  cout<<"\nSELECCIONE UN OPCI√ìN: ";
  cin>>menu;  // Captura la opci√≥n seleccionada
  
  /*
   * SISTEMA DE NAVEGACI√ìN: Switch para procesar opciones del men√∫
   * Cada case maneja una funcionalidad espec√≠fica del planetario
   */
  switch(menu)
  {
  /*
   * CASO 1: Consulta de planetas por distancia al sol
   * FUNCIONALIDAD: Muestra planetas con distancia menor a la seleccionada
   * M√âTODO: Usa array 'planetas[]' ordenado por distancia (mayor a menor)
   * L√ìGICA: Al seleccionar un planeta, muestra todos los que est√°n despu√©s
   *         en el array (que tienen menor distancia al sol)
   */
  case 1:
    int menu1;
    do {
      cout<<"\n";
      cout<<"Bienvenido al m√≥dulo de informaci√≥n: Consulta de informaci√≥n de los planetas con una distancia media al sol menor a la seleccionada.";
      cout<<"\nSeleccione una opci√≥n de las unidades atron√≥micas para consultar";
      cout << "\n---------------------------------------------------------------------------------\n";
      cout<<"1. Neptuno    30.05(UA).\n";
      cout<<"2. Urano      19.22(UA).\n";
      cout<<"3. Saturno    9.58(UA).\n";
      cout<<"4. J√∫piter    5.20(UA).\n";
      cout<<"5. Marte      1.52(UA).\n";
      cout<<"6. Tierra     1.00(UA).\n";
      cout<<"7. Venus      0.72(UA).\n";
      cout<<"8. Mercurio   0.39(UA).\n";
      cout<<"9. Volver al menu principal\n";
      cout << "---------------------------------------------------------------------------------\n";
      cout<<"\nSELECCIONE UN OPCI√ìN: ";
      cin>>menu1;
      
      if(menu1 != 9) 
      {
        if(menu1 >= 1 && menu1 <= 8) 
        {
          for(int x=menu1-1;x < 8; x++)
          {
            cout<<"\n--------------------------------------------------------------------------------- \n";
            cout << "Planeta: " << planetas[x].nombre << endl;
            cout << "Distancia al Sol: " << planetas[x].distancia_sol << " UA" << endl;
            cout << "Inclinaci√≥n orbital: " << planetas[x].inclinacion_orbital << "¬∞" << endl;
            cout << "Periodo orbital: " << planetas[x].periodo_orbital << " a√±os terrestres" << endl;
            cout << "Velocidad orbital media: " << planetas[x].velocidad_orbital << " km/s" << endl;
            cout << "------------------------------------------\n";
          }
        } 
        else 
        {
          cout << "Opci√≥n no v√°lida.\n";
        }
      }
    } while (menu1 != 9);  // Repetir hasta que usuario elija volver al men√∫ principal
    break;
    
  /*
   * CASO 2: Consulta de planetas por inclinaci√≥n orbital
   * FUNCIONALIDAD: Muestra planetas con inclinaci√≥n menor a la seleccionada
   * M√âTODO: Usa array 'planetas2[]' ordenado por inclinaci√≥n (mayor a menor)
   * L√ìGICA: Al seleccionar un planeta, muestra todos los que est√°n despu√©s
   *         en el array (que tienen menor inclinaci√≥n orbital)
   */
  case 2:
    int menu2;
    do {
      cout<<"\n";
      cout<<"Bienvenido al modulo de informacion: Consultar los planetas con una inclinaci√≥n orbital menor a la del planeta seleccionado";
      cout<<"\nSeleccione una opcion de las dependiendo de la inclinacion que desea consultar: ";
      cout << "\n---------------------------------------------------------------------------------\n";
      cout<<"1. Mercurio   7.0¬∞.\n";
      cout<<"2. Venus      3.4¬∞.\n";
      cout<<"3. Saturno    2.5¬∞.\n";
      cout<<"4. Marte      1.9¬∞.\n";
      cout<<"5. Neptuno    1.8¬∞.\n";
      cout<<"6. J√∫piter    1.3¬∞.\n"; 
      cout<<"7. Urano      0.8¬∞.\n";
      cout<<"8. Tierra     0.0¬∞.\n";
      cout<<"9. Volver al men√∫ principal\n";
      cout << "---------------------------------------------------------------------------------\n";
      cout<<"\nSELECCIONE UN OPCION: ";
      cin>>menu2;

      if(menu2 != 9) 
      {
        if(menu2 >= 1 && menu2 <= 8) 
        {
          for(int y=menu2-1;y < 8; y++)
          {
            cout<<"\n--------------------------------------------------------------------------------- \n";
            cout << "Planeta: " << planetas2[y].nombre << endl;
            cout << "Distancia al Sol: " << planetas2[y].distancia_sol << " UA" << endl;
            cout << "Inclinaci√≥n orbital: " << planetas2[y].inclinacion_orbital << "¬∞" << endl;
            cout << "Periodo orbital: " << planetas2[y].periodo_orbital << " a√±os terrestres" << endl;
            cout << "Velocidad orbital media: " << planetas2[y].velocidad_orbital << " km/s" << endl;
            cout << "------------------------------------------\n";
          }
        } 
      else 
        {
          cout << "Opci√≥n no v√°lida.\n";
        }
      }
    } while (menu2 != 9);  // Repetir hasta que usuario elija volver al men√∫ principal
    break;
    
  /*
   * CASO 3: Registro y edici√≥n de sat√©lites naturales
   * FUNCIONALIDAD: Permite agregar informaci√≥n de sat√©lites a cada planeta
   * CARACTER√çSTICAS:
   *   - Selecci√≥n de planeta (1-8)
   *   - Cada planeta puede tener hasta 5 sat√©lites registrados
   *   - Captura: nombre, excentricidad, periodo orbital, inclinaci√≥n
   */
  case 3:
    int menu3;
    do{
      cout<<"\nAqu√ç puedes registrar o editar informaci√ìn relacionado con diferentes sat√©lites.\n";
      cout<<"\nSeleccione el planeta al que deasea realizar a√±adir un registro de sat√©lite: \n";
      cout << "\n---------------------------------------------------------------------------------\n";
      cout<<"1. Neptuno.\n";
      cout<<"2. Urano.\n";
      cout<<"3. Saturno.\n";
      cout<<"4. J√∫piter.\n";
      cout<<"5. Marte.\n";
      cout<<"6. Tierra.\n";
      cout<<"7. Venus.\n";
      cout<<"8. Mercurio.\n";
      cout<<"9. Volver al men√∫ principal\n";
      cout << "---------------------------------------------------------------------------------\n";
      cout<<"\nSELECCIONE UN OPCI√ìN: ";
      cin>>menu3;

      if (menu3 >=1 && menu3 <= 8)
      {
        int espacio;
        do{
          cout<<"\nPara el planeta cuentas con 5 espacios para registrar sat√©lites, selecciona la opci√≥n que quieras guardar un sat√©lite: \n";
          cout << "---------------------------------------------------------------------------------\n";
          cout<<"1. sat√©lite 1 \n";
          cout<<"2. sat√©lite 2 \n";
          cout<<"3. sat√©lite 3\n";
          cout<<"4. sat√©lite 4\n";
          cout<<"5. sat√©lite 5\n";
          cout<<"6. Volver al men√∫ anterior\n";  
          cout << "---------------------------------------------------------------------------------\n";
          cout<<"\nSELECCIONE UN OPCI√ìN: ";
          cin>>espacio;
          
          if(espacio >= 1 && espacio <= 5) {
            cout << "\n=== Registro de Sat√©lite ===\n";
            cout << "Planeta asociado: " << satelite[menu3-1].planeta_asociado << endl;
            cout << "Ingrese el nombre del sat√©lite: ";
            cin >> satelite[menu3-1].nombre_satelite;
            cout << "Ingrese la excentricidad del sat√©lite: ";
            cin >> satelite[menu3-1].excentricidad_satelite;
            cout << "Ingrese el periodo orbital del sat√©lite (dias): ";
            cin >> satelite[menu3-1].periodo_orbital_satelite;
            cout << "Ingrese la inclinaci√≥n orbital del sat√©lite (grados): ";
            cin >> satelite[menu3-1].inclinacion_orbital_satelite;
            cout << "---------------------------------------------------------------------------------\n";
            cout << "\nSatelite registrado exitosamente!\n";
            cout << "---------------------------------------------------------------------------------\n";
            break;
          }
          else if(espacio != 6) {
            cout << "Opci√≥n no valida.\n";
          }
        } while (espacio != 6);
      }
      else if(menu3 != 9)
      {
        cout << "Opci√≥n no valida.\n";
      }
            
    } while (menu3 != 9);  // Repetir hasta que usuario elija volver al men√∫ principal
    break;
  
  /*
   * CASO 4: Visualizaci√≥n de informaci√≥n de sat√©lites
   * FUNCIONALIDAD: Muestra la informaci√≥n previamente guardada de sat√©lites
   * M√âTODO: Accede al array 'satelite[]' y muestra datos del √≠ndice seleccionado
   * INTERFAZ: Men√∫ de planetas -> Men√∫ de espacios de sat√©lites -> Mostrar datos
   */
  case 4:
    int menu4;
    do{
      cout<<"\nAqui puedes visualizar informaci√≥n previamente guardada relacionada con diferentes sat√©lites.\n";
      cout<<"\nSeleccione el planeta al que deasea visualizar un sat√©lite: \n";
      cout << "\n---------------------------------------------------------------------------------\n";
      cout<<"1. Neptuno.\n";
      cout<<"2. Urano.\n";
      cout<<"3. Saturno.\n";
      cout<<"4. J√∫piter.\n";
      cout<<"5. Marte.\n";
      cout<<"6. Tierra.\n";
      cout<<"7. Venus.\n";
      cout<<"8. Mercurio.\n";
      cout<<"9. Volver al men√∫ principal\n";
      cout << "---------------------------------------------------------------------------------\n";
      cout<<"\nSELECCIONE UN OPCI√ìN: ";
      cin>>menu4;

      if (menu4 >=1 && menu4 <= 8)
      {
        int espacio;
        do{
          cout<<"\npara este planeta cuentas con 5 espacios para visualizar satelites, selecciona la opcion que quieras visualizar un satelite: \n";
          cout << "---------------------------------------------------------------------------------\n";
          cout<<"1. sat√©lite 1 \n";
          cout<<"2. sat√©lite 2 \n";
          cout<<"3. sat√©lite 3\n";
          cout<<"4. sat√©lite 4\n";
          cout<<"5. sat√©lite 5\n";
          cout<<"6. Volver al men√∫ anterior\n";  
          cout << "---------------------------------------------------------------------------------\n";
          cout<<"\nSELECCIONE UN OPCI√ìN: ";
          cin>>espacio;

          if(espacio >= 1 && espacio <= 5) {
            cout << "\n=== Vista de Sat√©lite ===\n";
            cout << "Planeta asociado: " << satelite[menu4-1].planeta_asociado << endl;
            cout << "Nombre del satelite: " << satelite[menu4-1].nombre_satelite << endl;;
            cout << "Excentricidad del satelite: "<< satelite[menu4-1].excentricidad_satelite <<endl;
            cout << "Periodo orbital del satelite (dias): "<< satelite[menu4-1].periodo_orbital_satelite <<endl;
            cout << "Inclinacion orbital del satelite (grados): "<< satelite[menu4-1].inclinacion_orbital_satelite;
            cout << "---------------------------------------------------------------------------------\n";
            cout << "\nVisualizaci√≥n exitosa!\n";
            cout << "---------------------------------------------------------------------------------\n";
            break;
          }
          else if(espacio != 6) {
            cout << "Opci√≥n no valida.\n";
          }
        } while (espacio != 6);
      }
      else if(menu4 != 9)
      {
        cout << "Opci√≥n no valida.\n";
      }

    } while (menu4 != 9);  // Repetir hasta que usuario elija volver al men√∫ principal
    break;
    
    /*
     * CASO 5: Eliminaci√≥n de informaci√≥n de sat√©lites
     * FUNCIONALIDAD: Permite eliminar datos de sat√©lites previamente guardados
     * CARACTER√çSTICAS:
     *   - Muestra informaci√≥n antes de eliminar (confirmaci√≥n visual)
     *   - Solicita confirmaci√≥n del usuario antes de proceder
     *   - Limpia todos los campos del sat√©lite seleccionado
     * SEGURIDAD: Doble confirmaci√≥n para evitar eliminaciones accidentales
     */
    case 5:
      int menu5;
      do{
        cout<<"\nAqui puedes eliminar informacion previamente guardada relacionada con diferentes satelites.\n";
        cout<<"\nSeleccione el planeta al que deasea eliminarle un satelite: \n";
        cout << "\n---------------------------------------------------------------------------------\n";
        cout<<"1. Neptuno.\n";
        cout<<"2. Urano.\n";
        cout<<"3. Saturno.\n";
        cout<<"4. J√∫piter.\n";
        cout<<"5. Marte.\n";
        cout<<"6. Tierra.\n";
        cout<<"7. Venus.\n";
        cout<<"8. Mercurio.\n";
        cout<<"9. Volver al men√∫ principal\n";
        cout << "---------------------------------------------------------------------------------\n";
        cout<<"\nSELECCIONE UN OPCI√ìN: ";
        cin>>menu5;

        if (menu5 >=1 && menu5 <= 8)
        {
          int espacio;
          do{
            cout<<"\npara este planeta cuentas con 5 espacios para eliminar satelites, selecciona la opcion que quieras eliminar un satelite: \n";
            cout << "---------------------------------------------------------------------------------\n";
            cout<<"1. sat√©lite 1 \n";
            cout<<"2. sat√©lite 2 \n";
            cout<<"3. sat√©lite 3\n";
            cout<<"4. sat√©lite 4\n";
            cout<<"5. sat√©lite 5\n";
            cout<<"6. Volver al men√∫ anterior\n";  
            cout << "---------------------------------------------------------------------------------\n";
            cout<<"\nSELECCIONE UN OPCI√ìN: ";
            cin>>espacio;

            if(espacio >= 1 && espacio <= 5) {
              cout << "\n=== Informaci√≥n del Satelite a Eliminar ===\n";
              cout << "Planeta asociado: " << satelite[menu5-1].planeta_asociado << endl;
              cout << "Nombre del satelite: " << satelite[menu5-1].nombre_satelite << endl;
              cout << "Excentricidad del satelite: "<< satelite[menu5-1].excentricidad_satelite <<endl;
              cout << "Periodo orbital del satelite (dias): "<< satelite[menu5-1].periodo_orbital_satelite <<endl;
              cout << "Inclinaci√≥n orbital del satelite (grados): "<< satelite[menu5-1].inclinacion_orbital_satelite <<endl;
              cout << "\n---------------------------------------------------------------------------------\n";
              
              int confirmacion;
              cout << "¬øEstas seguro de que quieres eliminar este sat√©lite?\n ";
              cout << "1. S√≠\n";
              cout << "2. No\n";  // OPCIONES PARA CONFIRMAR LA ELIMINACION DE UN SATELITE
              cout<<"\nSELECCIONE UN OPCI√ìN: ";
              cin >> confirmacion;
              
              if(confirmacion == 1) {
                // Limpiar los datos del sat√©lite
                satelite[menu5-1].nombre_satelite = "";
                satelite[menu5-1].excentricidad_satelite = 0.0;
                satelite[menu5-1].periodo_orbital_satelite = 0.0;
                satelite[menu5-1].inclinacion_orbital_satelite = 0.0;
                
                cout << "\n¬°Satelite eliminado exitosamente!\n";
              } else {
                cout << "\nEliminaci√≥n cancelada.\n";
              }
              cout << "---------------------------------------------------------------------------------\n";
              break;
            }
            else if(espacio != 6) {
              cout << "Opci√≥n no valida.\n";
            }
          } while (espacio != 6);
        }
        else if(menu5 != 9)
        {
          cout << "Opci√≥n no valida.\n";
        }

      } while (menu5 != 9);  // Repetir hasta que usuario elija volver al men√∫ principal
    break;
    
  /*
   * CASO 6: Visualizaci√≥n completa de informaci√≥n de planetas
   * FUNCIONALIDAD: Muestra todos los planetas con su informaci√≥n completa
   * DATOS MOSTRADOS: nombre, distancia al sol, inclinaci√≥n, periodo orbital, velocidad
   * M√âTODO: Recorre array 'planetas[]' y muestra toda la informaci√≥n disponible
   */
  case 6:
    cout<<"\n=== Planetas ===\n\n";
    for(int i = 0; i < 8; i++) {
      cout << "Planeta: " << planetas[i].nombre << endl;
      cout << "Distancia al Sol: " << planetas[i].distancia_sol << " UA" << endl;
      cout << "Inclinaci√≥n orbital: " << planetas[i].inclinacion_orbital << "¬∞" << endl;
      cout << "Periodo orbital: " << planetas[i].periodo_orbital << " a√±os terrestres" << endl;
      cout << "Velocidad orbital media: " << planetas[i].velocidad_orbital << " km/s" << endl;
      cout << "------------------------------------------\n";
    }
    break;
    
 /*
  * CASO 7: Salida del programa
  * FUNCIONALIDAD: Termina la ejecuci√≥n del programa con mensaje de despedida
  * CARACTER√çSTICAS:
  *   - Mensaje de agradecimiento personalizado
  *   - Arte ASCII tem√°tico del planetario
  *   - Invitaci√≥n a futuras visitas
  */
 case 7:
    cout<<"\n";
    cout<<"====================================================================\n";
    cout<<"                  ¬°GRACIAS POR USAR EL PLANETARIO!\n";
    cout<<"====================================================================\n";
    cout<<"\n";
    cout<<"    ‚ú®     ‚≠ê      ‚ú®         ‚≠ê        ‚ú®      ‚≠ê       ‚ú®\n";
    cout<<"\n";
    cout<<"  ‚≠ê            .-\"\"\"\"\"\"\"\"\"\"-.\n";
    cout<<"            .'                   '.\n";
    cout<<"    ‚ú®     /     OBSERVATORIO      \\\n";
    cout<<"          |       PLANETARIO        |\n";
    cout<<"  ‚≠ê      |                         |        ‚≠ê\n";
    cout<<"          |    ¬°GRACIAS POR TU      |\n";
    cout<<"    ‚ú®    |        VISITA!          |           ‚ú®\n";
    cout<<"          |                         |\n";
    cout<<"  ‚≠ê      |   Esperamos verte       |        ‚≠ê\n";
    cout<<"          |     pronto otra vez     |\n";
    cout<<"    ‚ú®    |                         |           ‚ú®\n";
    cout<<"          |  Sigue explorando el    |\n";
    cout<<"  ‚≠ê      |       universo...       |        ‚≠ê\n";
    cout<<"          |                         |\n";
    cout<<"    ‚ú®     \\                       /\n";
    cout<<"            '.                   .'\n";
    cout<<"  ‚≠ê           '-.............-'\n";
    cout<<"\n";
    cout<<"    ‚ú®     ‚≠ê      ‚ú®         ‚≠ê        ‚ú®      ‚≠ê       ‚ú®\n";
    cout<<"\n";
    cout<<"          üåå ¬°Hasta la pr√≥xima aventura! üåå\n";
    cout<<"====================================================================\n";
    break;
    
  /*
   * CASO DEFAULT: Manejo de opciones inv√°lidas
   * FUNCIONALIDAD: Captura selecciones no v√°lidas del men√∫
   * COMPORTAMIENTO: Muestra mensaje de error y regresa al men√∫ principal
   */
  default:
    cout<<"Este punto no esta registrado en el menu"<<endl;
  }
  
}while (menu!=7);

/*
 * FIN DEL PROGRAMA
 * El programa termina cuando el usuario selecciona salir
 */
}
